// Script para probar la conectividad desde la consola del navegador
// Copia y pega este c√≥digo en la consola del navegador (F12)

console.log('üîß Iniciando test de conectividad...');

// Test 1: Verificar si el proxy est√° funcionando
async function testProxy() {
  console.log('\n1Ô∏è‚É£ Probando proxy configuration...');
  
  try {
    const response = await fetch('/v1/api/customer', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });
    
    console.log('‚úÖ Proxy Status:', response.status);
    console.log('‚úÖ Proxy Headers:', [...response.headers.entries()]);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Proxy Data:', data);
      return true;
    } else {
      console.log('‚ö†Ô∏è Proxy Response not OK:', response.statusText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Proxy Error:', error);
    return false;
  }
}

// Test 2: Verificar conectividad directa al backend
async function testDirectBackend() {
  console.log('\n2Ô∏è‚É£ Probando conexi√≥n directa al backend...');
  
  try {
    const response = await fetch('http://localhost:8085/v1/api/customer', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });
    
    console.log('‚úÖ Direct Status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Direct Data:', data);
      return true;
    } else {
      console.log('‚ö†Ô∏è Direct Response not OK:', response.statusText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Direct Error (probablemente CORS):', error);
    return false;
  }
}

// Test 3: Verificar configuraci√≥n de Angular
function testAngularConfig() {
  console.log('\n3Ô∏è‚É£ Verificando configuraci√≥n de Angular...');
  
  // Verificar si estamos en el puerto correcto
  const currentPort = window.location.port;
  console.log('üîç Puerto actual:', currentPort);
  
  if (currentPort === '4202') {
    console.log('‚úÖ Puerto correcto (4202)');
  } else {
    console.log('‚ö†Ô∏è Puerto incorrecto. Deber√≠a ser 4202 para usar el proxy');
  }
  
  // Verificar si el proxy est√° configurado
  console.log('üîç URL actual:', window.location.href);
  console.log('üîç Origin:', window.location.origin);
  
  return currentPort === '4202';
}

// Ejecutar todos los tests
async function runAllTests() {
  console.log('üöÄ Ejecutando todos los tests de conectividad...\n');
  
  const angularOk = testAngularConfig();
  const proxyOk = await testProxy();
  const directOk = await testDirectBackend();
  
  console.log('\nüìä RESUMEN DE RESULTADOS:');
  console.log('Angular Config:', angularOk ? '‚úÖ' : '‚ùå');
  console.log('Proxy Connection:', proxyOk ? '‚úÖ' : '‚ùå');
  console.log('Direct Connection:', directOk ? '‚úÖ' : '‚ùå');
  
  if (proxyOk) {
    console.log('\nüéâ ¬°El proxy est√° funcionando correctamente!');
    console.log('Tu frontend puede conectarse al backend a trav√©s del proxy.');
  } else if (directOk) {
    console.log('\n‚ö†Ô∏è El backend est√° funcionando pero hay problemas con el proxy.');
    console.log('Verifica la configuraci√≥n del proxy en proxy.conf.json');
  } else {
    console.log('\n‚ùå No se puede conectar al backend.');
    console.log('Verifica que el backend est√© corriendo en el puerto 8085');
  }
  
  console.log('\nüí° INSTRUCCIONES:');
  console.log('1. Aseg√∫rate de que el backend est√© corriendo en http://localhost:8085');
  console.log('2. Aseg√∫rate de que Angular est√© corriendo con: ng serve --port 4202 --proxy-config proxy.conf.json');
  console.log('3. Visita: http://localhost:4202/test para usar el componente de prueba');
}

// Ejecutar autom√°ticamente
runAllTests();